[
  {
  	"order": 0,
  	"name": "Tutorial Test",
  	"description": "Let’s start with the basics! You are writing patterns with the pure intent of matching certain characters in strings. Simple letters and digits easily match to themselves. /a/ will match to anything containing an 'a', /1/ will match to anything with a '1'. A word, /meow/ for example, will match to the word ‘meow’ if it appears in that order. However, when wrapping characters inside of square brackets you can match specific characters. For example, /[meow]/ will match to one of the characters ‘m’, ‘e’, ‘o’, or ‘w’, in any order, and will be case sensitive unless specified otherwise. Fun fact! The DOT! The /./ character is actually a wild card that will match to any character, although if you throw in some brackets /[.]/ it matches only to itself. Use with caution. To check for only one dot be sure to escape the dot using a backslash! /\\./ Got it? Give it a try! Remember to start and end your expression with forward slashes.",
  	"author": "Troy",
  	"difficulty": "easy",
  	"testCases": [
  	  { "case": "abcd", "expectation": true },
  	  { "case": "acd", "expectation": false },
  	  { "case": "abcde", "expectation": true }
  	],
    "answers": {
      "explanation": "We are looking for a pattern literal here. So it makes sense that we can just type in abc for the answer.",
      "answer": "/abc/"
    }
  },
  {
  	"order": 1,
  	"name": "Excluding Characters",
  	"description": "Let’s review! In our previous challenge we used square brackets to match single characters. Conversely, we can simply use the caret character '^' inside of square brackets to exclude characters. Here’s an example! The regex /[^xyx]/ will exclude ‘x’, ‘y’, or ‘z’. Try it out. Using the caret, write a pattern that skips the verbs in the list.",
  	"author": "Ben",
  	"difficulty": "easy",
  	"testCases":[
  		{ "case": "mall", "expectation": true },
  		{ "case": "fall", "expectation": false },
  		{ "case": "tall", "expectation": true },
  		{ "case": "stall", "expectation": false },
  		{ "case": "ball", "expectation": true },
  		{ "case": "call", "expectation": false },
  		{ "case": "wall", "expectation": true }
  	],
    "answers": {
      "explanation": "We are looking for a pattern literal here. So it makes sense that we can just type in abc for the answer.",
      "answer": "/abc/"
    }
  },
  {
  	"order": 2,
  	"name": "Matching Zip Codes",
  	"description": "Well done! Now that you’re getting used to the basics we can get a little fancier. The hyphen is a wonderful tool for creating a concise way of matching to many different characters. Instead of writing /[abcdefg]/, we can simply write /[a-g]/. This also works for digits, for example writing /[0-9]/ is a great way to match to any number. But wait! There’s an even better way to match numbers. You can use metacharacters to match specific classes of characters. The \\d metacharacter is used to match only numbers and is equivalent to /[0-9]/. Matching to a certain number of character repetitions is as easy as following the character with some curly braces. /a{1}/ will match to a string containing one ‘a’, while /a{1,}/ will match a string as long as it has at least one ‘a’, but could contain one hundred ‘a’s. If you would like to match various strings that range in 'a'-length, create a limit. /a{2,5}/ will match strings with two to five continuous ‘a’s. Try to use curly brackets and the metacharacter to validate and match the 5-digit zip codes!",
  	"author": "Lucy",
  	"difficulty": "easy",
  	"testCases": [
  		{ "case": "94549", "expectation": true },
  		{ "case": "94105", "expectation": true },
  		{ "case": "666", "expectation": false },
  		{ "case": "9999999", "expectation": false }
  	],
    "answers": {
      "explanation": "We are looking for a pattern literal here. So it makes sense that we can just type in abc for the answer.",
      "answer": "/abc/"
    }
  },
  {
    "order": 3,
    "name": "Words that end with 'en'",
    "description": "Sweet! Now let’s increase the specificity of our matches. Sometimes we want to make sure a line starts or ends with a specific word. Using the caret character without square brackets will guarantee that the regular expression only matches to lines that begin with the given string. For example we want to validate that a url is on a secured protocol. To do so we want to make sure that the url starts with 'https://' by using the pattern /^https:\\/\\// Additionally it is also possible to match lines that end with specific characters or words. You can do that using the dollar sign ($). Give it a whirl! Try to match only the words that end with 'en'.",
    "author": "Dana",
    "difficulty": "medium",
    "testCases": [
      { "case": "glenn",  "expectation": false },
      { "case": "glen", "expectation": true },
      { "case": "turkmen", "expectation": true },
      { "case": "cayenne", "expectation": false },
      { "case": "big ben", "expectation": true },
      { "case": "opium den", "expectation": true },
      { "case": "wise men", "expectation": true },
      { "case": "never again", "expectation": false}
    ],
    "answers": {
      "explanation": "We are looking for a pattern literal here. So it makes sense that we can just type in abc for the answer.",
      "answer": "/abc/"
    }
  },
  {
  	"order": 4,
  	"name": "Removing Spaces",
  	"description": "Great job! Let’s move on to yet another metacharacter! Often when you build a website, like Regexcellence.co, you may run into scenarios where you do not want to have any whitespaces in your URL. Good news! There’s a metacharacter for that! You can use \\s to match any whitespace in a given line. Write a pattern that matches each sentence and be sure to include the spaces!",
  	"author": "Ben",
  	"difficulty": "easy",
  	"testCases":[
  		{ "case": "Regexcellence is a great site!", "expectation": true },
  		{ "case": "Regex is the only source truth", "expectation": true },
  		{ "case": "Lucy and Dana are awesome!", "expectation": true },
  		{ "case": "Troy is a beast!", "expectation": true },
  		{ "case": "Remove all of the whitespaces.", "expectation": true }
  	],
    "answers": {
      "explanation": "We are looking for a pattern literal here. So it makes sense that we can just type in abc for the answer.",
      "answer": "/abc/"
    }
  },
  {
  	"order": 5,
  	"name": "Matching Phone Numbers",
  	"description": "Write a pattern that matches a variety of phone number formats",
  	"author": "Ben",
  	"difficulty": "medium",
  	"testCases":[
  		{ "case": "(925) 145-5555", "expectation": true },
  		{ "case": "(925) 1455555", "expectation": false },
  		{ "case": "925-145-5555", "expectation": true },
  		{ "case": "(925) 145-55555", "expectation": false },
  		{ "case": "925 145-5555", "expectation": false },
  		{ "case": "925 145 5555", "expectation": false },
  		{ "case": "(925)hello145-5555", "expectation": false }
  	],
    "answers": {
      "explanation": "We are looking for a pattern literal here. So it makes sense that we can just type in abc for the answer.",
      "answer": "/abc/"
    }
  }
]
