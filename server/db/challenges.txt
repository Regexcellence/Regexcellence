[
{
	"name": "Spaces at the beginning and end of strings",
	"description": "Write a regex that matches whitespace at the beginning and end of strings",
	"author": "Troy",
	"difficulty": "2",
	"testCases": [
	  { "case": " I have whitespace! ", "expectation": true },
	  { "case": "I have more whitespace!   ", "expectation": true },
	  { "case": "   I have some whitespace too!", "expectation": true },
	  { "case": "Did you say whitespace?", "expectation": false },
	  { "case": "Naw", "expectation": false },
	  { "case": "Remember me?", "expectation": false }
	],
},
{
	"name": "Use regex to validate regex!",
	"description": "Ever wonder how that flag pops up at the bottom of the screen when you type in a badly formed regex? Yes, you guessed it, there's a regex testing your regex! How about trying to do one yourself?\n All you need to do is to make sure that the regular expression contains two forward slashes, and uses any or none at all of the appropriate flags at the end of the expression ('gimuy').",
	"author": "Troy",
	"difficulty": "2",
	"testCases": [
	  { "case": "/i'm a regex!/", "expectation": true },
	  { "case": "/^whoop$/gim", "expectation": true },
	  { "case": "/\/tryME\!/gimuy", "expectation": true },
	  { "case": " /whitespace?/ ", "expectation": false },
	  { "case": "/whatisthis\?/gg", "expectation": false },
	  { "case": "/heckno", "expectation": false },
	  { "case": "heckno/gi", "expectation": false }
	],
},
{
	"name": "Find The Kitty",
	"description": "Match the correct meows to catch Jazzy the cat =^.^= !",
	"author": "Dana Li",
	"difficulty": "2",
	"testCases": [
	  { "case": "meow", "expectation": true },
	  { "case": "meooow", "expectation": true },
	  { "case": "MEOWING Jazzy!", "expectation": true },
	  { "case": "who meowed?", "expectation": false },
	  { "case": "It's Jazzy!": false }
	],
},
	"name": "Is it a letter?",
	"description": "If the string contains an ASCII letter, then match it!",
	"author": Troy Gibb,
	"difficulty": 1,
	"testCases": [
		{ "case": "knock-knock?", "expectation": true },
		{ "case": "who's there?", "expectation": true },
		{ "case": "Annoying digits", "expectation": true },
		{ "case": "Annoying digits who?", "expectation": true },
		{ "case": "123214124122": false },
		{ "case": "23423423098423": false },
		{ "case": "45983498534": false },
		{ "case": "34544": false }
	]
]
