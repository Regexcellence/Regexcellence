[
{
	"name": "Spaces at the beginning and end of strings",
	"description": "Write a regex that matches whitespace at the beginning and end of strings",
	"author": "troygibb",
	"difficulty": 2,
	"testCases": [
	  { "case": " I have whitespace! ", "expectation": true },
	  { "case": "I have more whitespace!   ", "expectation": true },
	  { "case": "   I have some whitespace too!", "expectation": true },
	  { "case": "Did you say whitespace?", "expectation": false },
	  { "case": "Naw", "expectation": false },
	  { "case": "Remember me?", "expectation": false }
	]
},
{
	"name": "Use regex to validate regex!",
	"description": "Ever wonder how that flag pops up at the bottom of the screen when you type in a badly formed regex? Yes, you guessed it, there's a regex testing your regex! How about trying to do one yourself?\n All you need to do is to make sure that the regular expression contains two forward slashes, and uses any or none at all of the appropriate flags at the end of the expression ('gimuy').",
	"author": "troygibb",
	"difficulty": 2,
	"testCases": [
	  { "case": "/i'm a regex!/", "expectation": true },
	  { "case": "/^whoop$/gim", "expectation": true },
	  { "case": "/\\/tryME\\!/gimuy", "expectation": true },
	  { "case": " /whitespace?/ ", "expectation": false },
	  { "case": "/whatisthis\\?/gg", "expectation": false },
	  { "case": "/heckno", "expectation": false },
	  { "case": "heckno/gi", "expectation": false }
	]
},
{
	"name": "Find The Kitty",
	"author": "hellodanali",
	"description": "Match the correct meows to catch Jazzy the cat =^.^= !",
	"difficulty": 2,
	"testCases": [
	  { "case": "meow", "expectation": true },
	  { "case": "meooow", "expectation": true },
	  { "case": "MEOWING Jazzy!", "expectation": true },
	  { "case": "who meowed?", "expectation": false },
	  { "case": "It's Jazzy!", "expectation": false }
	]
},
{
	"name": "Is it a letter?",
	"author": "troygibb",
	"description": "If the string contains an ASCII letter, then match it!",
	"difficulty": 1,
	"testCases": [
		{ "case": "knock-knock?", "expectation": true },
		{ "case": "who's there?", "expectation": true },
		{ "case": "Annoying digits", "expectation": true },
		{ "case": "Annoying digits who?", "expectation": true },
		{ "case": "123214124122", "expectation": false },
		{ "case": "23423423098423", "expectation": false },
		{ "case": "45983498534", "expectation": false },
		{ "case": "34544", "expectation": false }
	]
},
{
	"name": "Are there duplicates?",
	"description": "Match strings that contain duplicate letters.",
	"author": "troygibb",
	"difficulty": 4,
	"testCases": [
	  { "case": "The cat goes meow", "expectation": true },
	  { "case": "The dog barks", "expectation": false },
	  { "case": "The cow goes moo", "expectation": true },
	  { "case": "Supercalifragilisticexpialidocious", "expectation": true },
	  { "case": "uncopyrightable", "expectation": false },
	  { "case": "subdermatoglyphic", "expectation": false }
	]
},
{
  "name": "Match the kitties",
	"description": "Match da cats, not the puppers",
	"author": "lwonsower",
	"difficulty": 1,
	"testCases": [
		{ "case": "Maine Coon", "expectation": true },
		{ "case": "Munchkin", "expectation": true },
		{ "case": "American Shorthair", "expectation": true },
		{ "case": "Bulldog", "expectation": false },
		{ "case": "Pug", "expectation": false },
		{ "case": "Corgi", "expectation": false }
	]
},
{
  "name": "No Comments",
  "author": "bbtran",
  "description": "Math the valid javascript comments",
  "difficulty": 2,
  "testCases": [
    {"case": "// San Francisco Makersquare!", "expectation": true},
    {"case": "/* San Francisco Makersquare! */", "expectation": true},
    {"case": "// Do it for the kitties!!", "expectation": true},
    {"case": "/ / function getRegexcellence(cat) {return cat}", "expectation": false},
    {"case": "/Hi*/Team*/Regexcellence*/", "expectation": false},
    {"case": "supercalifragilisticexpialidocious", "expectation": false}
  ]
},
{
	"name": "Is it a number?",
	"author": "troygibb",
	"description": "Is a description really necessary?",
	"difficulty": 1,
	"testCases": [
	  {"case": "123456789", "expectation": true},
	  {"case": "987543321", "expectation": true},
	  {"case": "1010000010101010", "expectation": true},
	  {"case": "NOT A NUMBER", "expectation": false},
	  {"case": "I'M A NUMBER!", "expectation": false},
	  {"case": "NOOOOOOOT", "expectation": false}
	]
},
{
	"name": "Email validation",
	"author": "troygibb",
	"description": "The local-part of the e-mail address may use any of these ASCII characters: Uppercase and lowercase English letters (a-z, A-Z), Digits 0 to 9, Characters ! # $ % & ' * + - / = ? ^ _ ` { | } ~, Character . (dot, period, full stop), provided that it is not the first or last character, and provided also that it does not appear two or more times consecutively. Additionally, the domain can only take only the ASCII letters a through z (in a case-insensitive manner), the digits 0 through 9, and the hyphen (-).",
	"difficulty": 5,
	"testCases": [
	  {"case": "troygibb@regexcellence.com", "expectation": true},
	  {"case": "steve.jobs@apple.lala", "expectation": true},
	  {"case": "jerry_seinfeld@nbc.co", "expectation": true},
	  {"case": "&$^#*!!!!@WTF.world", "expectation": true},
	  {"case": "soylent_sucks@thro-a-straw", "expectation": true},
	  {"case": "hacker(in)residence@anonymous.com", "expectation": false},
	  {"case": "ILOVEYOU@", "expectation": false},
	  {"case": "...ellipses@co.co", "expectation": false},
	  {"case": "ILOVEYOU@", "expectation": false},
	  {"case": "a_whole_lot_of_NOPE@LOL!.COM", "expectation": false}
	]
},
{
  "name": "Match the valid IPs",
  "author": "bbtran",
  "description": "Internet protocol addressses are represented by four sets of numbers delimited by decimal periods after every third digit",
  "difficulty": 3,
  "testCases": [
    {"case": "134.201.250.155", "expectation": true},
    {"case": "173.247.204.106", "expectation": true},
    {"case": "127.0.0.1", "expectation": true},
    {"case": "818.555.1234", "expectation": false},
    {"case": "192.168.0.0000.1", "expectation": false},
    {"case": "34.A.120.300", "expectation": false}
  ]
},
{
  "name": "State Name",
  "author": "hellodanali",
  "description": "Make sure you match every single letter of the state names.",
  "difficulty": 3,
  "testCases": [
    {"case": "California", "expectation": true},
    {"case": "Hawaii", "expectation": true},
    {"case": "New York", "expectation": true},
    {"case": "Texas", "expectation": true},
    {"case": "Californian", "expectation": false},
    {"case": "Hawaiian", "expectation": false},
    {"case": "New Yorker", "expectation": false},
    {"case": "Texasian", "expectation": false}
  ]
},
{
  "name": "Before it all ends...",
  "author": "hellodanali",
  "description": "Internet protocol addressses are represented by four sets of numbers delimited by decimal periods after every third digit",
  "difficulty": 3,
  "testCases": [
    {"case": "My phone ran out of battery.", "expectation": true},
    {"case": "The train broke down.", "expectation": true},
    {"case": "But I'm bringing pizza.", "expectation": true},
    {"case": "My phone ran out of battery?", "expectation": false},
    {"case": "The train broke down?", "expectation": false},
    {"case": "Pizza is on the way ?", "expectation": false}
  ]
},
{
  "name": "Self Closing Tags",
  "author": "hellodanali",
  "description": "Some HTML tags are self closing, let's get the self closing ones only.",
  "difficulty": 4,
  "testCases": [
    {"case": "<hr />", "expectation": true},
    {"case": "<input />", "expectation": true},
    {"case": "<img />", "expectation": true},
    {"case": "hr", "expectation": false},
    {"case": "<input></input>", "expectation": false},
    {"case": "<img>", "expectation": false}
  ]
},
{
  "name": "Match the correct Hexadecimal colors",
  "author": "lwonsower",
  "description": "The Hexadecimal format has been used in mathematics and computing for decades, and the hex triplet is a six-digit, three-byte hexadecimal number used in html and css to make a color scale with 16,777,216 possible colors. Hexadecimal colors are represented by digits 0-9 and A,B,C,D,E, and F.",
  "difficulty": 2,
  "testCases": [
    {"case": "#F5F5F5", "expectation": true},
    {"case": "#FF4500", "expectation": true},
    {"case": "#B0C4DE", "expectation": true},
    {"case": "#H5H5H5", "expectation": false},
    {"case": "A52A2A", "expectation": false},
    {"case": "225 221 0", "expectation": false}
  ]
},
{
  "name": "Alphabetical Order",
  "author": "lwonsower",
  "description": "Write a pattern to match to strings of letters in alphabetical order. Do not match to strings out of order.",
  "difficulty": 3,
  "testCases": [
    {"case": "EffOrt", "expectation": true},
    {"case": "AbhoRs", "expectation": true},
    {"case": "biJouX", "expectation": true},
    {"case": "lovelYY", "expectation": false},
    {"case": "oranGES", "expectation": false},
    {"case": "TUESDAY", "expectation": false}
  ]
},
{
  "name": "Buy a quality calcium supplement",
  "author": "lwonsower",
  "description": "You are in the supplement department at Whole Foods looking for a quality calcium product. There are six bottles of pills, all of them different qualities and sources of calcium. Write a regular expression that matches to the high quality calcium and avoid the crappy forms.",
  "difficulty": 1,
  "testCases": [
    {"case": "Algae Lithothamnion Calcareum", "expectation": true},
    {"case": "Calcium Hydroxyapatite", "expectation": true},
    {"case": "Calcium Orotate", "expectation": true},
    {"case": "Calcium Carbonate", "expectation": false},
    {"case": "Calcium Citrate", "expectation": false},
    {"case": "Calcium Gluconate", "expectation": false}
  ]
},
{
  "name": "Match the proper domain names",
  "author": "lwonsower",
  "description": "Match to actual domains, avoid the nonsense.",
  "difficulty": 5,
  "testCases": [
    {"case": "http://www.groogle.com", "expectation": true},
    {"case": "http://www.greatdomain.test.gov", "expectation": true},
    {"case": "http://wasabi-pea-addicts-anonymous.com", "expectation": true},
    {"case": "http://--hiMom--.com", "expectation": false},
    {"case": "http://io", "expectation": false},
    {"case": "http://mks444life,biz", "expectation": false}
  ]
},
{
  "name": "Roman Numeral Validator",
  "author": "lwonsower",
  "description": "Validate the following test cases to ensure you are only matching to proper Roman Numerals.",
  "difficulty": 2,
  "testCases": [
    {"case": "MMMCDLVI", "expectation": true},
    {"case": "MMCCXXII", "expectation": true},
    {"case": "DLXVII", "expectation": true},
    {"case": "IL", "expectation": false},
    {"case": "XMVI", "expectation": false},
    {"case": "IIHHIII", "expectation": false}
  ]
},
{
  "name": "PalindromemordnilaP",
  "author": "bbtran",
  "description": "Match the 3-5 character palindromes by grouping and using back-references!",
  "difficulty": 3,
  "testCases": [
    {"case": "dad", "expectation": true},
    {"case": "haah", "expectation": true},
    {"case": "kayak", "expectation": true},
    {"case": "madam", "expectation": true},
    {"case": "noon", "expectation": true},
    {"case": "haha", "expectation": false},
    {"case": "papa", "expectation": false},
    {"case": "kayaks", "expectation": false},
    {"case": "wasabi", "expectation": false}
  ]
},
{
  "name": "Match the integers and decimals",
  "author": "bbtran",
  "description": "Match the lines that contain decimals and integers.",
  "difficulty": 2,
  "testCases": [
    {"case": "0.25 dollar + 25 cents = 2 quarters", "expectation": true},
    {"case": "3.14159265358979323846264338327950288", "expectation": true},
    {"case": "the golden ratio is 1.61803398", "expectation": true},
    {"case": "Regexcellence is the future", "expectation": false},
    {"case": "Regexcellence is now", "expectation": false},
    {"case": "Wasabi peas are lyfe", "expectation": false}
  ]
},
{
  "name": "Darn timestamps",
  "author": "bbtran",
  "description": "You're having an amazing chat conversation with your s/o. You want to save the conversation but copy and pasting captures the time stamps! Write a regex pattern that matches the following timestamps. Also skip the boring messages.",
  "difficulty": 3,
  "testCases": [
    {"case": "[22:25:16] Me: Hey sweetie why are you such a cutie?", "expectation": true},
    {"case": "[22:27:35] Baby: You think I'm cute?", "expectation": true},
    {"case": "[22:29:49] Me: Yea, why else would I still get nervous everytime I see you?", "expectation": true},
    {"case": "[22:35:04] Baby: Haha aww... <3", "expectation": true},
    {"case": "12:45PM: Hey what are you doing?", "expectation": false},
    {"case": "12:50PM: Nothing", "expectation": false},
    {"case": "12:55PM: Okay bye", "expectation": false}
  ]
},
{
  "name": "Four Letter S & P Words",
  "author": "bbtran",
  "description": "Match the words that are 4 letters long and start with S and end with P!",
  "difficulty": 1,
  "testCases": [
    {"case": "Stop", "expectation": true},
    {"case": "Shop", "expectation": true},
    {"case": "SWAP", "expectation": true},
    {"case": "soup", "expectation": true},
    {"case": "shape", "expectation": false},
    {"case": "SWAPP", "expectation": false},
    {"case": "SIP", "expectation": false},
    {"case": "HELP", "expectation": false}
  ]
},
{
  "name": "JavaScript Objects",
  "author": "lwonsower",
  "description": "Match to proper Javascript objects.",
  "difficulty": 5,
  "testCases": [
    {"case": "var obj = { key: value }", "expectation": true},
    {"case": "obj[a] = 1", "expectation": true},
    {"case": "obj.b = 2", "expectation": true},
    {"case": "var obj = [ key, value ]", "expectation": false},
    {"case": "obj[()] = 10", "expectation": false},
    {"case": "obj.hello", "expectation": false}
  ]
},
{
  "name": "SQL commands",
  "author": "lwonsower",
  "description": "Match the correct SQL commmands!",
  "difficulty": 5,
  "testCases": [
    {"case": "SELECT * FROM Users", "expectation": true},
    {"case": "INSERT INTO Cities (ID, Name, State) VALUES (1, San Francisco, CA)", "expectation": true},
    {"case": "DELETE FROM Kitties WHERE KittyID = 4", "expectation": true},
    {"case": "JOIN # from Users", "expectation": false},
    {"case": "FUZE into Cats", "expectation": false},
    {"case": "(DELETE) FROM CATS ID5", "expectation": false}
  ]
}
]
